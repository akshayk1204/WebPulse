// utils/generatePdf.js
import { jsPDF } from 'jspdf';
import html2canvas from 'html2canvas';

export const generatePdfReport = async (domain, data) => {
  const doc = new jsPDF({
    orientation: 'portrait',
    unit: 'mm',
    format: 'a4'
  });

  // Add cover page
  doc.setFontSize(28);
  doc.setTextColor(40, 53, 147); // Dark blue
  doc.text('Website Analysis Report', 105, 40, { align: 'center' });
  
  doc.setFontSize(20);
  doc.setTextColor(0, 0, 0);
  doc.text(domain, 105, 60, { align: 'center' });
  
  doc.setFontSize(14);
  doc.setTextColor(100);
  doc.text(`Generated on: ${new Date().toLocaleDateString()}`, 105, 70, { align: 'center' });
  
  // Add summary page
  doc.addPage();
  doc.setFontSize(22);
  doc.setTextColor(40, 53, 147);
  doc.text('Summary Scores', 105, 20, { align: 'center' });
  
  // Add score cards
  const scores = [
    { label: 'Performance', score: data.performanceScore },
    { label: 'SEO', score: data.seoScore },
    { label: 'Mobile', score: data.mobileScore },
    { label: 'Security', score: data.securityScore }
  ];
  
  scores.forEach((item, index) => {
    const x = index % 2 === 0 ? 20 : 110;
    const y = 40 + Math.floor(index / 2) * 50;
    
    // Score card background
    doc.setFillColor(245, 245, 245);
    doc.roundedRect(x, y, 80, 40, 3, 3, 'F');
    
    // Score label
    doc.setFontSize(14);
    doc.setTextColor(0, 0, 0);
    doc.text(item.label, x + 40, y + 10, { align: 'center' });
    
    // Score value
    doc.setFontSize(18);
    doc.setTextColor(getScoreColor(item.score));
    doc.text(`${item.score}/100`, x + 40, y + 25, { align: 'center' });
    
    // Score bar
    doc.setFillColor(224, 224, 224);
    doc.rect(x + 10, y + 32, 60, 5, 'F');
    doc.setFillColor(getScoreColor(item.score));
    doc.rect(x + 10, y + 32, 60 * (item.score / 100), 5, 'F');
  });

  // Add detailed sections
  doc.addPage();
  doc.setFontSize(22);
  doc.setTextColor(40, 53, 147);
  doc.text('Detailed Analysis', 105, 20, { align: 'center' });
  
  // Add performance details
  doc.setFontSize(16);
  doc.setTextColor(0, 0, 0);
  doc.text('Performance', 20, 35);
  
  doc.setFontSize(12);
  let y = 45;
  Object.entries(data.performanceData).forEach(([key, value]) => {
    if (typeof value === 'object') return;
    doc.text(`${key}: ${value}`, 20, y);
    y += 7;
    if (y > 280) {
      doc.addPage();
      y = 20;
    }
  });

  // Add footer to all pages
  const pageCount = doc.internal.getNumberOfPages();
  for (let i = 1; i <= pageCount; i++) {
    doc.setPage(i);
    doc.setFontSize(10);
    doc.setTextColor(100);
    doc.text(`Page ${i} of ${pageCount}`, 105, 287, { align: 'center' });
    doc.text('Generated by WebPulse', 105, 292, { align: 'center' });
  }

  doc.save(`WebPulse_Report_${domain.replace(/[^a-z0-9]/gi, '_')}.pdf`);
};

const getScoreColor = (score) => {
  if (score >= 80) return '#4CAF50'; // Green
  if (score >= 60) return '#FFC107'; // Amber
  if (score >= 40) return '#FF9800'; // Orange
  return '#F44336'; // Red
};